[{"body":"","link":"/docs/","title":"Posts"},{"body":"Hi, I'm Sharon. I'm a frontend engineer from Taipei.\nThese days I build web app with React. I create platforms, campaign websites, and administration systems at work.\nIn the past few years, I wrote Vue.js and Django. And since I studied in college, using Python to build tools is my interest.\nThis blog contains my notes for development, mostly are frontend things. Feel free to read and contact me if you would like to discuss more.\n  Email: yasyuanwu@gmail.com Bio: LinkedIn profile     ","link":"/about/","title":"About Me"},{"body":"接續以 Hugo 建立部落格，Hugo 在其文件中提到了多種 Hosting and Deployment 方式。若你選擇將 source code 放在 GitHub 上，那麼你可以直接考慮將部落格放在 GitHub Pages 上，並使用 GitHub Actions 自動化所有部署和更新的流程。\nStep 1: Create a Project on GitHub for the Blog 在 GitHub 上建立部落格 repository，並將 source code 都推上去。\n不該推的東西請加到 .gitignore 中\n resources .DS_Store  Step 2: 建立 GitHub Pages 如果你想建立 GitHub Pages，請按照說明在帳號下建立一個名為 your-username.github.io 的 repository。\nStep 3: 部署準備 Create GitHub token 在 GitHub Tokens Page 建立 personal access token，權限選擇 repo 和 workflow。建立完成後，請複製 token。\nAdd Access Token as Secrets 在部落格 repo 的 Settings \u0026gt; Secrets 頁面上，建立一 Repository secrets。\n Name: 可取你想要的 Value: 貼上剛剛複製的 token  Step 4: Create A GitHub Action  在部落格 repo 建立 .github/workflows 資料夾 資料夾下新增 main.yml，貼上以下 action 設置  name: CI on: push jobs: deploy: runs-on: ubuntu-18.04 steps: - name: Git checkout uses: actions/checkout@v2 - name: Update theme # (Optional) If you have the theme added as submodule, you can pull it and use the most updated version run: git submodule update --init --recursive - name: Setup hugo uses: peaceiris/actions-hugo@v2 # or change to a version you prefer with: hugo-version: \u0026quot;0.80.0\u0026quot; - name: Build # remove --minify tag if you do not need it # docs: https://gohugo.io/hugo-pipes/minification/ run: hugo --minify # replace TOKEN and username to your own settings - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.TOKEN }} external_repository: \u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io publish_dir: ./public # keep_files: true user_name: \u0026lt;username\u0026gt; user_email: \u0026lt;username@email.com\u0026gt; publish_branch: main # cname: example.com Step 5: Push to GitHub push 到 GitHub 後，你將會在 repo 的 Actions 頁面看到 action 的進度。等待 action 成功後，就可以在 https://\u0026lt;username\u0026gt;.github.io/ 看到部落格囉！\n Reference  GitHub Actions Hugo: Deploy Static Site using GitHub Actions ","link":"/docs/2021/deploy-hugo-blog-to-github/","title":"自動化部署 Hugo 部落格到 GitHub Pages"},{"body":"Hugo 是一個用 Go 寫成的靜態網站生成器（Static Site Generator）。其架構允許以 Markdown 格式撰寫內容，再搭配 layout template 渲染出畫面，對於喜歡用 Markdown 簡潔撰寫文章的人來說很合適！\n就讓我們來看看如何以 Hugo 建立部落格，並在每次更新後自動化部署到 GitHub Pages。\nHugo 不管是「網站打包」還是「從零建立網站」的速度都很快，號稱\n The world’s fastest framework for building websites.\n 與類似的框架 Wordpress 和 Gatsby 一樣，Hugo 也有豐富多元且開源的主題 (theme)，讓人方便快速地就建立起自己的網站。\n此網站就是以 Hugo 建立的，並使用 Compose Theme 讓我們來看看是怎麼做的吧～\nGetting Started  Reference: Hugo - Quick Start, Compose - Install Theme\n  Step 1 - Install Hugo (for MacOS)  brew install hugo  Step 2 - New a Site  hugo new site my-blog  Step 3 - Install a theme  cd my-blog git init git submodule add https://github.com/onweru/compose/ themes/compose cp -a themes/compose/exampleSite/* .  Step 4 - Run Hugo Server  hugo server   Step 5 - Open http://localhost:1313/ in browser and then you'll see a site with the Compose theme\n  Step 6 - Add your content and customize the styles!\n  Directory Structure Hugo 有制式的檔案架構，若依照該架構放置內容，便能享有 Hugo 預設的功能，諸如：列表 (list page) 和單篇 (single page) 結構、多國語言、template 組合等等。以下介紹常見 Hugo 架構中各檔案夾的意義。\nmy-blog ├── archetypes ├── assets // scss and js to be processed by Hugo Pipes ├── content // 網站主要內容都維護在此 ├── layouts // 網站頁面樣式，因為我們有使用主題，如果需要客製化覆蓋主題的樣式，可在此新增檔案 ├── static // 放置網站圖片、CSS、JS 檔案 ├── theme // 主題 └── config.toml // 設定檔  Layout 覆蓋順序請見 Hugo's Lookup Order\n Deploy 請見下篇自動化部署 Hugo 部落格到 GitHub Pages\n","link":"/docs/2021/build-a-blog-with-hugo/","title":"以 Hugo 建立部落格"},{"body":"在寫 React component 時會須要確認 props 是否符合型別和資料結構，以確保 component 能如預期運作。除了用 Flow 或 TypeScript 去檢查型別之外，React 本身也提供 propTypes 屬性用以檢查拿到的 props。在 function 和 class component 上都可以使用。\n不只上述好處，個人認為定義 propTypes 也能讓 component 的 interface 更為清楚，使其他開發者一眼就知道該傳入的 props，有類似文件的作用。\n以下內容大多翻譯自 React 文件：Typechecking With PropTypes\n 須注意為了避免效能問題，propTypes 檢查只發生在開發模式。 如果發生錯誤，會在 console 中看到警告\n Install props-types 自 React v15.5 後，React.PropTypes 被移出到獨立的 library，因此若要使用須額外安裝。\nnpm install prop-types --save Supported PropTypes  Basic data types  PropTypes.any PropTypes.bool  PropTypes.number PropTypes.string  PropTypes.func PropTypes.array PropTypes.object PropTypes.symbol   Renderable types  PropTypes.node : the prop should be anything that can be rendered by React  PropTypes.element: the prop should be a React element   也有其他更精確的 operator 可以用，亦能傳入 expression  instanceOf oneOf oneOfType arrayOf shape   有能定義是否為 required  isRequired    Example (同理 function component) import PropTypes from \u0026quot;prop-types\u0026quot;; class ReactComponent extends React.Component { // ...component class body here } ReactComponent.propTypes = { // ...props-type definitions here } Default Prop Values 也可以給予 props defaultProps。型別檢查會在 defaultProps 賦予 props 值之後，所以型別檢查也會作用在 defaultProps 上。\nclass ReactComponent extends React.Component { render() { return ( \u0026lt;div\u0026gt;Hello, {this.props.name}\u0026lt;/div\u0026gt; ) } } ReactComponent.defaultProps = { name: \u0026quot;stranger\u0026quot;, } Reference  PropTypes in React: A complete guide ","link":"/docs/2020/react-props-types/","title":"Validating React Component Props with props-types"},{"body":"Go or called GoLang is an open source programming language that makes it easy to build simple, reliable, and efficient software.\nIn this post, we'll talk about how to install Golang and set its workplace. Also, sub directories under the workplace are introduced.\nInstall Go  For MacOS, using Homebrew  brew install go Set Go Workplace  A workspace is Go’s way to facilitate project management.\n  A workspace in nutshell, is a directory on your system where Go looks for source code files, manages dependency packages and build distribution binary files. You can have as many workspaces as you want, as long as you keep GOPATH environment variable pointed to current working workspace directory.\n  Reference: Getting started with Go\n Default Workplace $HOME/go Customize Your Go Workplace Permanently  bash  open file: open ~/.bash_profile edit file: add export GOPATH=$HOME/\u0026lt;customized-path\u0026gt;/go to the file reload: source ~/.bash_profile   zsh  open file: open ~/.zshrc edit file: add export GOPATH=$HOME/\u0026lt;customized-path\u0026gt;/go to the file reload: source ~/.zshrc   others  see SettingGOPATH    Temporarily  For MacOS  see Setting up Environment Variables in MacOS Sierra     Sub Directories under a Go Workplace src  Containing packages (also packages installed by go get command) Whenever working with a new Go project, a new directory for the project should be created under $GOPATH/src.  pkg  Containing Go package objects, which are compiled version of original package source code When a Go program hits import statement, Go looks for the followings in order.  pre-compiled package object corresponded packages in $GOPATH/src corresponded packages in $GOROOT/src    bin  Containing binary executable files for executing Go programs, which are created by go install commands $GOBIN is an environment variable that Go uses to put binary files. By default, $GOBIN is $GOPATH/bin but you can change it, too. ","link":"/docs/2020/install-and-set-go/","title":"Install Golang and Set Go Workplace"},{"body":"What is npm and nvm?  npm (Node Package Manager)  JavaScript 套件庫管理工具，可以藉由它下載各式各樣的套件   nvm (Node Version Manager)  各套件和專案用的 Node.js 版本不同，而版本間有不相容的問題，導致套件和專案無法順利運行，因此需要版本管理工具 從 nvm 下載/更換 Node.js 和 npm 版本    Install nvm (for MacOS)  Install nvm using Homebrew  brew install nvm  Add nvm command to shell  echo \u0026quot;source $(brew --prefix nvm)/nvm.sh\u0026quot; \u0026gt;\u0026gt; .bash_profile  Reload the bashprofile file  . ~/.bash_profile or\nsource ~/.bash_profile  If using zsh, need to add command to zshrc  open ~/.zshrc Add source ~/.bash_profile to file, which means load all commands under bashprofile   Check if installation is successful  nvm --version \u0026gt; Example output: 0.35.1 or\ncommand -v nvm \u0026gt; output: nvm Install Node.js and npm by nvm  Check available remote version  nvm ls-remote  Install preferred version  nvm install \u0026lt;version\u0026gt;  Use specific version  nvm use \u0026lt;version\u0026gt; \u0026gt; Example output: Now using node v10.17.0 (npm v6.11.3)  See available local versions  nvm list ","link":"/docs/2020/nvm-and-npm/","title":"Introduction to NVM and NPM"},{"body":"","link":"/","title":"Draw Closer"}]