{"version":3,"sources":["config.js","components/Cell/style.js","components/Cell/index.js","components/ActionBar/style.js","components/ActionBar/index.js","containers/Game/style.js","utils/createGame.js","utils/getCellIndex.js","utils/revealCells.js","utils/initializeGame.js","utils/setFlagOnCell.js","utils/getGameLevel.js","containers/Game/index.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","level","ICON_COLORS","_VALUE_COLORS","0","1","2","3","4","5","6","7","8","StyledCell","styled","Button","props","value","Cell","isMine","isRevealed","isFlagged","onClick","onContextMenu","gameEnded","isFailedCell","data-testid","active","disable","icon","faBomb","color","faFlag","StyledActionBar","div","ActionBar","buttons","map","button","index","disabled","text","role","StyledGameInfo","StyledRow","DEFAULT_CELL","x","y","createGame","rows","DEFAULT_LEVEL","cols","Array","fill","_","getCellXAndYByIndex","getCellIndexByXAndY","Math","floor","revealCells","cells","targetCell","updatedCells","cell","gameResult","reveal","cellIndex","i","j","createMines","mines","maxIndex","firstClickIndex","indices","Set","size","randomIndex","random","add","_checkIfWon","length","setFlagOnCell","filter","LEVEL","getGameLevel","config","MESSAGES","Game","useState","ended","setEnded","started","setStarted","setCells","failedCell","setFailedCell","handleGameResult","result","handleLeftClick","event","nativeEvent","which","prevCells","firstClick","forEach","mineIndex","rowIndex","colIndex","initializeGame","cellRows","push","groupCellsInRows","row","idxRol","idxCol","preventDefault","alert","handleRightClick","GlobalStyles","createGlobalStyle","ms_sans_serif","ms_sans_serif_bold","styleReset","AppWrapper","StyledWindow","Window","App","theme","original","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.312a79b0.chunk.js","sourcesContent":["module.exports = {\n  level: \"easy\",\n};\n","import styled from \"styled-components\";\nimport { Button } from \"react95\";\n\nconst ICON_COLORS = {\n  mine: \"black\",\n  flag: \"brown\",\n  failure: \"red\",\n};\n\n// TODO: should support different levels\nconst _VALUE_COLORS = {\n  0: \"transparent\",\n  1: \"blue\",\n  2: \"green\",\n  3: \"coral\",\n  4: \"blueviolet\",\n  5: \"maroon\",\n  6: \"cornflowerblue\",\n  7: \"black\",\n  8: \"dimgray\",\n};\n\nconst StyledCell = styled(Button)`\n  width: 34px;\n  height: 36px;\n  font: bold 13px ms_sans_serif;\n  color: ${props => _VALUE_COLORS[props.value] || _VALUE_COLORS[0]};\n`;\n\nexport { StyledCell, ICON_COLORS };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { StyledCell, ICON_COLORS } from \"./style\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBomb, faFlag } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Cell({\n  value,\n  isMine,\n  isRevealed,\n  isFlagged,\n  onClick,\n  onContextMenu,\n  gameEnded,\n  isFailedCell,\n}) {\n  const displayValue = () => {\n    return isFlagged ? (\n      <FontAwesomeIcon data-testid=\"cell-flag\" icon={faFlag} color={ICON_COLORS.flag} />\n    ) : isRevealed ? (\n      <span data-testid=\"cell-value\">{value}</span>\n    ) : (\n      <span data-testid=\"cell-hidden-value\">{\"\"}</span>\n    );\n  };\n\n  const displayAnswer = () => {\n    return isMine ? (\n      <FontAwesomeIcon\n        data-testid=\"cell-mine\"\n        icon={faBomb}\n        color={isFailedCell ? ICON_COLORS.failure : ICON_COLORS.mine}\n      />\n    ) : (\n      <span data-testid=\"cell-solution\">{value || \"\"}</span>\n    );\n  };\n\n  return (\n    <StyledCell\n      data-testid=\"cell\"\n      onClick={onClick}\n      onContextMenu={onContextMenu}\n      active={isRevealed || gameEnded}\n      disable={isRevealed || gameEnded}\n      value={value}>\n      {gameEnded ? displayAnswer() : displayValue()}\n    </StyledCell>\n  );\n}\n\nCell.propTypes = {\n  value: PropTypes.number.isRequired,\n  isMine: PropTypes.bool.isRequired,\n  isRevealed: PropTypes.bool.isRequired,\n  isFlagged: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n  onContextMenu: PropTypes.func.isRequired,\n  gameEnded: PropTypes.bool.isRequired,\n  isFailedCell: PropTypes.bool.isRequired,\n};\n\nexport default Cell;\n","import styled from \"styled-components\";\n\nconst StyledActionBar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 5px;\n  margin: 5px 0 0;\n\n  button {\n    font: bold 13px ms_sans_serif;\n  }\n`;\n\nexport { StyledActionBar };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react95\";\nimport { StyledActionBar } from \"./style\";\n\nfunction ActionBar({ buttons = [] }) {\n  return (\n    <StyledActionBar data-testid=\"actionBar\">\n      {buttons.map((button, index) => {\n        const { onClick, disabled, text } = button;\n        return (\n          <Button key={`button_${index}`} onClick={onClick} disabled={!!disabled} role=\"button\">\n            {text}\n          </Button>\n        );\n      })}\n    </StyledActionBar>\n  );\n}\n\nActionBar.propTypes = {\n  buttons: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default ActionBar;\n","import styled from \"styled-components\";\n\nconst StyledGameInfo = styled.div`\n  padding: 5px 7px;\n`;\n\nconst StyledRow = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport { StyledGameInfo, StyledRow };\n","import { DEFAULT_LEVEL, getCellXAndYByIndex } from \"../utils\";\n\nconst DEFAULT_CELL = {\n  x: 0,\n  y: 0,\n  value: 0,\n  isRevealed: false,\n  isFlagged: false,\n  isMine: false,\n};\n\n/**\n * @param {Number} rows - number of rows\n * @param {Number} cols - number of columns\n * @returns {Array} an array of cells with rows * cols size representing a game\n */\nfunction createGame({ rows = DEFAULT_LEVEL.rows, cols = DEFAULT_LEVEL.cols } = {}) {\n  return new Array(rows * cols).fill(0).map((_, index) => {\n    const [x, y] = getCellXAndYByIndex({ index, rows });\n    return { ...DEFAULT_CELL, x, y };\n  });\n}\n\nexport { DEFAULT_CELL, createGame };\n","/**\n * @param {Number} x - cell's x position\n * @param {Number} y - cell's y position\n * @param {Number} rows - number of rows in a game\n * @returns {Number} index of a cell\n */\nexport function getCellIndexByXAndY({ x, y, rows }) {\n  return x * rows + y;\n}\n\n/**\n * @param {Number} index - index of a cell\n * @param {Number} rows - number of rows in a game\n * @returns {Array} [x, y] representing x and y position of a cell\n */\nexport function getCellXAndYByIndex({ index, rows }) {\n  const x = Math.floor(index / rows);\n  const y = index % rows;\n\n  return [x, y];\n}\n","import { getCellIndexByXAndY, DEFAULT_LEVEL } from \"../utils\";\n\n/**\n * @param {Array} cells - an array of cells representing a game\n * @param {Array} targetCell - [x, y] of the clicked cell\n * @param {Object} level - an object of the game level\n * @returns {Array} [updated cells after revealing, game result]\n */\nfunction revealCells({ cells = [], targetCell = [], level = DEFAULT_LEVEL } = {}) {\n  const { rows, cols } = level;\n\n  if (cells[getCellIndexByXAndY({ x: targetCell[0], y: targetCell[1], rows })].isMine) {\n    // game over\n    return [cells, false];\n  }\n\n  let updatedCells = cells.map(cell => ({ ...cell }));\n  let gameResult = null;\n\n  const reveal = (x, y) => {\n    const cellIndex = getCellIndexByXAndY({ x, y, rows });\n    if (updatedCells[cellIndex] && !updatedCells[cellIndex].isRevealed) {\n      updatedCells[cellIndex].isRevealed = true;\n      updatedCells[cellIndex].isFlagged = false;\n\n      // if the cell has no adjacent mine, keep traversing\n      if (updatedCells[cellIndex].value === 0) {\n        for (let i = -1; i <= 1; i++) {\n          for (let j = -1; j <= 1; j++) {\n            if (\n              !(i === 0 && j === 0) &&\n              x + i >= 0 &&\n              x + i < rows &&\n              y + j >= 0 &&\n              y + j < cols &&\n              updatedCells[getCellIndexByXAndY({ x: x + i, y: y + j, rows })]\n            ) {\n              reveal(x + i, y + j);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  reveal(targetCell[0], targetCell[1]);\n\n  return [updatedCells, gameResult];\n}\n\nexport default revealCells;\n","import { getCellXAndYByIndex } from \"./getCellIndex\";\nimport { DEFAULT_LEVEL, getCellIndexByXAndY } from \"./index\";\nimport revealCells from \"./revealCells\";\n\nfunction createMines({ mines, maxIndex, firstClickIndex }) {\n  let indices = new Set();\n\n  while (indices.size < mines) {\n    const randomIndex = Math.floor(Math.random() * maxIndex);\n    // The first click should not be a mine\n    if (randomIndex !== firstClickIndex) indices.add(randomIndex);\n  }\n\n  return indices;\n}\n\n/**\n * @param {Array} cells - an array of cells representing a game\n * @param {Array} firstClick - [x, y] of the first click\n * @param {Number} level - an object of the game level\n * @returns {Array} updated cells after assigning mines and values\n */\nfunction initializeGame({ cells = [], firstClick = [], level = DEFAULT_LEVEL } = {}) {\n  let updatedCells = cells.map(cell => ({ ...cell }));\n\n  const { rows, cols, mines } = level;\n\n  const minesIndices = createMines({\n    mines,\n    maxIndex: rows * cols,\n    firstClickIndex: getCellIndexByXAndY({ x: firstClick[0], y: firstClick[1], rows }),\n  });\n\n  minesIndices.forEach(mineIndex => {\n    const [rowIndex, colIndex] = getCellXAndYByIndex({ index: mineIndex, rows });\n\n    // assign mine-cells\n    updatedCells[mineIndex].isMine = true;\n\n    // update values of mine-cells' adjacent cells\n    for (let i = -1; i <= 1; i++) {\n      for (let j = -1; j <= 1; j++) {\n        const cellIndex = getCellIndexByXAndY({ x: rowIndex + i, y: colIndex + j, rows });\n        if (\n          !(i === 0 && j === 0) &&\n          rowIndex + i >= 0 &&\n          rowIndex + i < rows &&\n          colIndex + j >= 0 &&\n          colIndex + j < cols &&\n          updatedCells[cellIndex]\n        ) {\n          updatedCells[cellIndex].value += 1;\n        }\n      }\n    }\n  });\n\n  return revealCells({ cells: updatedCells, targetCell: firstClick, level });\n}\n\nexport { createMines, initializeGame };\n","import { DEFAULT_LEVEL, getCellIndexByXAndY } from \"./index\";\n\nfunction _checkIfWon(updatedCells) {\n  for (let i = 0; i < updatedCells.length; i++) {\n    if (updatedCells[i].isFlagged !== updatedCells[i].isMine) {\n      // game haven't fail yet\n      return null;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @param {Array} cells - an array of cells representing a game\n * @param {Array} targetCell - [x, y] of the clicked cell\n * @param {Object} level - an object of the game level\n * @returns {Array} [updated cells after revealing, game result]\n */\n\nfunction setFlagOnCell({ cells = [], targetCell = [], level = DEFAULT_LEVEL } = {}) {\n  const { rows, mines } = level;\n\n  let updatedCells = cells.map(cell => ({ ...cell }));\n  let gameResult = null;\n\n  const cellIndex = getCellIndexByXAndY({ x: targetCell[0], y: targetCell[1], rows });\n  if (!updatedCells[cellIndex].isRevealed) {\n    updatedCells[cellIndex].isFlagged = !cells[cellIndex].isFlagged;\n  }\n\n  // If all flags are set, check if won\n  if (updatedCells.filter(cell => cell.isFlagged).length === mines) {\n    gameResult = _checkIfWon(updatedCells);\n  }\n\n  return [updatedCells, gameResult];\n}\n\nexport default setFlagOnCell;\n","const DEFAULT_LEVEL = {\n  rows: 9,\n  cols: 9,\n  mines: 10,\n};\n\n/**\n * @param {String} level - level of game\n * @returns {Object} An object of level details\n */\nfunction getGameLevel({ level = \"easy\" }) {\n  switch (level) {\n    case \"easy\":\n    default:\n      return {\n        ...DEFAULT_LEVEL,\n      };\n  }\n}\n\nexport { getGameLevel, DEFAULT_LEVEL };\n","import React, { useState } from \"react\";\nimport { Cell, ActionBar } from \"../../components\";\nimport { StyledGameInfo, StyledRow } from \"./style\";\nimport { getGameLevel, createGame, initializeGame, revealCells, setFlagOnCell } from \"../../utils\";\nimport config from \"../../config\";\n\nconst LEVEL = getGameLevel(config.level);\n\nconst MESSAGES = {\n  success: \"You win !!\",\n  failure: \"You lose QQ\",\n  playing: \"Click to play!\",\n};\n\nfunction Game() {\n  const { rows, cols, mines } = LEVEL;\n\n  // null for not ended; true for succeeded; false for failed\n  const [ended, setEnded] = useState(null);\n\n  // true for started; false for haven't started\n  const [started, setStarted] = useState(false);\n\n  // an array of cells representing the game\n  const [cells, setCells] = useState(createGame({ rows, cols }));\n\n  // { x: x, y: y } of the cell clicked to cause failure\n  const [failedCell, setFailedCell] = useState({});\n\n  const handleGameResult = (result, x, y) => {\n    if (result !== null) {\n      if (!result) {\n        setFailedCell({ x, y });\n      }\n      setEnded(result);\n    }\n  };\n\n  const handleLeftClick = (event, x, y) => {\n    if (event.nativeEvent.which === 1) {\n      if (!started) {\n        setStarted(true);\n        setCells(prevCells => {\n          const [updatedCells, _] = initializeGame({\n            cells: prevCells,\n            firstClick: [x, y],\n            level: LEVEL,\n          });\n\n          return updatedCells;\n        });\n      } else {\n        setCells(prevCells => {\n          const [updatedCells, gameResult] = revealCells({\n            cells: prevCells,\n            targetCell: [x, y],\n            level: LEVEL,\n          });\n          handleGameResult(gameResult, x, y);\n          return updatedCells;\n        });\n      }\n    }\n  };\n\n  const handleRightClick = (event, x, y) => {\n    event.preventDefault();\n\n    if (!started) {\n      alert(\"Left click any cell to start the game first!\");\n    } else {\n      setCells(prevCells => {\n        const [updatedCells, gameResult] = setFlagOnCell({\n          cells: prevCells,\n          targetCell: [x, y],\n          level: LEVEL,\n        });\n        handleGameResult(gameResult, x, y);\n        return updatedCells;\n      });\n    }\n  };\n\n  const handleRestart = () => {\n    setEnded(null);\n    setStarted(false);\n    setCells(createGame({ rows, cols }));\n    setFailedCell({});\n  };\n\n  const handleSolve = () => {\n    setEnded(true);\n  };\n\n  const getFlagsCount = () => {\n    return cells.filter(cell => cell.isFlagged).length;\n  };\n\n  const groupCellsInRows = () => {\n    let cellRows = [];\n    cells.forEach((cell, index) => {\n      if (index % rows === 0) {\n        cellRows.push([cell]);\n      } else {\n        cellRows[cellRows.length - 1].push(cell);\n      }\n    });\n    return cellRows;\n  };\n\n  return (\n    <main data-testid=\"game\">\n      <ActionBar\n        buttons={[\n          { text: \"Restart\", onClick: handleRestart },\n          { text: \"Solve\", onClick: handleSolve, disabled: !started },\n        ]}\n      />\n      <StyledGameInfo>\n        <h2>{ended !== null ? (ended ? MESSAGES.success : MESSAGES.failure) : MESSAGES.playing}</h2>\n        <div>Mines: {mines}</div>\n        <div>Flags: {getFlagsCount()}</div>\n      </StyledGameInfo>\n\n      <div>\n        {groupCellsInRows(cells).map((row, idxRol) => (\n          <StyledRow key={`row_${idxRol}`}>\n            {row.map((cell, idxCol) => {\n              const { x, y } = cell;\n              return (\n                <Cell\n                  key={`cell_${idxCol}`}\n                  {...cell}\n                  gameEnded={ended !== null}\n                  isFailedCell={failedCell.x === x && failedCell.y === y}\n                  onClick={event => {\n                    handleLeftClick(event, x, y);\n                  }}\n                  onContextMenu={event => {\n                    handleRightClick(event, x, y);\n                  }}></Cell>\n              );\n            })}\n          </StyledRow>\n        ))}\n      </div>\n    </main>\n  );\n}\n\nexport default Game;\n","import React from \"react\";\nimport \"./assets/scss/main.scss\";\nimport { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport { styleReset, Window, WindowHeader } from \"react95\";\n// pick a theme of your choice\nimport original from \"react95/dist/themes/original\";\n// original Windows95 font (optionally)\nimport ms_sans_serif from \"react95/dist/fonts/ms_sans_serif.woff2\";\nimport ms_sans_serif_bold from \"react95/dist/fonts/ms_sans_serif_bold.woff2\";\nimport Game from \"./containers/Game\";\nimport styled from \"styled-components\";\n\nconst GlobalStyles = createGlobalStyle`\n  @font-face {\n    font-family: 'ms_sans_serif';\n    src: url('${ms_sans_serif}') format('woff2');\n    font-weight: 400;\n    font-style: normal\n  }\n  @font-face {\n    font-family: 'ms_sans_serif';\n    src: url('${ms_sans_serif_bold}') format('woff2');\n    font-weight: bold;\n    font-style: normal\n  }\n  body {\n    font-family: 'ms_sans_serif';\n  }\n  ${styleReset}\n`;\n\nconst AppWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  background: teal;\n  padding: 30px;\n`;\n\nconst StyledWindow = styled(Window)`\n  width: fit-content;\n  display: block;\n  margin: 0 auto;\n`;\n\nfunction App() {\n  return (\n    <div>\n      <GlobalStyles />\n      <ThemeProvider theme={original}>\n        <AppWrapper>\n          <StyledWindow>\n            <WindowHeader>Minesweeper</WindowHeader>\n            <Game />\n          </StyledWindow>\n        </AppWrapper>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}